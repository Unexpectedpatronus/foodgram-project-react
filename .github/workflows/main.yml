name: Main Foodgram workflow

on:
  push:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
      - name: Test with flake8
        run: python -m flake8 backend/

  build_and_push_to_DockerHub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
      - name: Push frontend to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_DockerHub
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Copy /infra/ via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.yml,infra/nginx.conf"
          target: "foodgram/infra"
      - name: pull from docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker logout
            docker rm -v -f $(docker ps -qa)
            sudo systemctl stop nginx
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
      - name: docker-compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd foodgram/infra/
            sudo rm .env
            sudo touch .env
            sudo chmod ugo+rwx .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            sudo systemctl start nginx
            sudo docker-compose up -d --build
            sudo docker-compose exec -T backend python manage.py collectstatic --no-input
            sudo docker-compose exec -T backend python manage.py makemigrations
            sudo docker-compose exec -T backend python manage.py migrate --no-input
            sudo docker-compose exec -T backend python manage.py migrate --run-syncdb
            echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser(${{ secrets.DJANGO_ADM_NAME }}, ${{ secrets.DJANGO_ADM_EMAIL }}, ${{ secrets.DJANGO_ADM_PASSWORD }})" | python manage.py shell
            sudo docker-compose exec -T backend python manage.py load_tags
            sudo docker-compose exec -T backend python manage.py load_data
            sudo docker system prune -af

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
