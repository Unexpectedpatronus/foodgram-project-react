name: Main Foodgram workflow

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'


jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
      - name: Test with flake8
        run: python -m flake8 backend/

  copy_files_to_server:
    name: Copy infra and docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Copy /infra/ via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.yml,infra/nginx.conf"
          target: "foodgram"
      - name: Copy /docs/ via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docs/openapi-schema.yml,docs/redoc.html"
          target: "foodgram"

  build_push_backend_to_DockerHub:
    name: Building back image and pushing it to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push "foodgram/backend" to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_push_frontend_to_DockerHub:
    name: Building front image and pushing it to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push "foodgram/frontend" to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_push_backend_to_DockerHub
      - build_push_frontend_to_DockerHub
      - copy_files_to_server
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            rm -f .env
            touch .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
            cd infra
            sudo docker compose down
            sudo docker compose pull
            sudo docker compose up -d --build
            sudo docker compose exec -T backend python manage.py makemigrations
            sudo docker compose exec -T backend python manage.py migrate --no-input
            sudo docker compose exec -T backend python manage.py collectstatic --no-input
            sudo docker compose exec -T backend cp -r /app/static/. /backend_static/static
            sudo docker compose exec -T backend python manage.py load_tags
            sudo docker compose exec -T backend python manage.py load_data
            sudo docker image prune -af
            sudo docker system prune -af

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
